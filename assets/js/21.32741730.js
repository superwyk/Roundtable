(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{244:function(t,a,r){"use strict";r.r(a);var e=r(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"合并两个有序链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并两个有序链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并两个有序链表")]),t._v(" "),r("h2",{attrs:{id:"_1、题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、题目描述","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、题目描述")]),t._v(" "),r("p",[t._v("输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。")]),t._v(" "),r("h2",{attrs:{id:"_2、思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、思路")]),t._v(" "),r("p",[t._v("首先需要判断几个特殊情况，即判断输入的两个指针是否为空。如果第一个链表为空，则直接返回第二个链表；如果第二个链表为空，则直接返回第一个链表。如果两个链表都是空链表，合并的结果是得到一个空链表。")]),t._v(" "),r("p",[t._v("两个链表都是排序好的，我们只需要从头遍历链表，判断当前指针，哪个链表中的值小，即赋给合并链表指针，剩余的结点仍然是排序的，所以合并的步骤和之前是一样的，所以这是典型的递归过程，用递归可以轻松实现。")]),t._v(" "),r("h2",{attrs:{id:"_3、代码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、代码实现")])])}),[],!1,null,null,null);a.default=s.exports}}]);