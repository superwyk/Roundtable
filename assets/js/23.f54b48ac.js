(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{248:function(t,a,r){"use strict";r.r(a);var e=r(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"反转链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#反转链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 反转链表")]),t._v(" "),r("h2",{attrs:{id:"_1、题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、题目描述","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、题目描述")]),t._v(" "),r("p",[t._v("输入一个链表，反转链表后，输出新链表的表头。")]),t._v(" "),r("h2",{attrs:{id:"_2、思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、思路")]),t._v(" "),r("p",[t._v("本题比较简单，有两种方法可以实现：（1）三指针。使用三个指针，分别指向当前遍历到的结点、它的前一个结点以及后一个结点。将指针反转后，三个结点依次前移即可。（2）递归方法。同样可以采用递归来实现反转。将头结点之后的链表反转后，再将头结点接到尾部即可。")]),t._v(" "),r("h2",{attrs:{id:"_3、代码实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、代码实现")])])}),[],!1,null,null,null);a.default=s.exports}}]);