(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{208:function(t,a,r){t.exports=r.p+"assets/img/Time-Complexity.2ec8e66c.png"},209:function(t,a,r){t.exports=r.p+"assets/img/structure-two-type.35d1bdb8.png"},247:function(t,a,r){"use strict";r.r(a);var e=r(0),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"时间复杂度和空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度和空间复杂度")]),t._v(" "),e("p",[t._v("首先要搞懂时间复杂度和空间复杂度的概念，它们的高低共同决定着一段代码质量的好坏：")]),t._v(" "),e("h4",{attrs:{id:"_1-时间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 时间复杂度")]),t._v(" "),e("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),t._v(" "),e("blockquote",[e("p",[t._v("没有循环语句，记作O(1)，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作O(n)，也叫线性阶。")])]),t._v(" "),e("p",[t._v("常见的时间复杂度有：")]),t._v(" "),e("ul",[e("li",[t._v("O(1): Constant Complexity: Constant 常数复杂度")]),t._v(" "),e("li",[t._v("O(log n): Logarithmic Complexity: 对数复杂度")]),t._v(" "),e("li",[t._v("O(n): Linear Complexity: 线性时间复杂度")]),t._v(" "),e("li",[t._v("O(n^2): N square Complexity 平⽅方")]),t._v(" "),e("li",[t._v("O(n^3): N square Complexity ⽴立⽅方")]),t._v(" "),e("li",[t._v("O(2^n): Exponential Growth 指数")]),t._v(" "),e("li",[t._v("O(n!): Factorial 阶乘")])]),t._v(" "),e("p",[e("img",{attrs:{src:r(208),alt:"Time-Complexity"}})]),t._v(" "),e("h4",{attrs:{id:"_2-空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 空间复杂度")]),t._v(" "),e("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),t._v(" "),e("p",[t._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),e("h2",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),e("blockquote",[e("p",[t._v("数据结构即数据元素相互之间存在的一种和多种特定的关系集合。")])]),t._v(" "),e("p",[t._v("一般你可以从两个维度来理解它，逻辑结构和存储结构。")]),t._v(" "),e("h4",{attrs:{id:"_1-逻辑结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-逻辑结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 逻辑结构")]),t._v(" "),e("p",[e("img",{attrs:{src:r(209),alt:"数据结构的逻辑结构"}})]),t._v(" "),e("p",[t._v("简单的来说逻辑结构就是数据之间的关系，逻辑结构大概统一的可以分成两种：线性结构、非线性结构。")]),t._v(" "),e("ul",[e("li",[t._v("线性结构：是一个有序数据元素的集合。 其中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。常用的线性结构有: 栈，队列，链表，线性表。")]),t._v(" "),e("li",[t._v("非线性结构：各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。常见的非线性结构有 二维数组，树等。")])]),t._v(" "),e("h4",{attrs:{id:"_2-存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 存储结构")]),t._v(" "),e("p",[t._v("存储结构是逻辑结构用计算机语言的实现。常见的存储结构有顺序存储、链式存储、索引存储以及散列存储。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("ul",[e("li",[t._v("数组在内存中的位置是连续的，它就属于顺序存储；")]),t._v(" "),e("li",[t._v("链表是主动建立数据间的关联关系的，在内存中却不一定是连续的，它属于链式存储；")]),t._v(" "),e("li",[t._v("还有顺序和逻辑上都不存在顺序关系，但是你可以通过一定的方式去放问它的哈希表，数据散列存储。")])]),t._v(" "),e("h2",{attrs:{id:"目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),e("h4",{attrs:{id:"链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/print-from-tail-to-head"}},[t._v("✔️从尾到头打印链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/delete-repeat-node"}},[t._v("✔️删除链表中重复的节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/reverse-linked-list"}},[t._v("✔️反转链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/copy-complicated-linked-list"}},[t._v("✔️复杂链表的复制")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/entry-node-of-loop"}},[t._v("✔️链表中环的入口结点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/deep-clone"}},[t._v("环形链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/deep-clone"}},[t._v("约瑟夫环")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/find-first-common-node"}},[t._v("✔️两个链表的第一个公共节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/find-Kth-to-tail"}},[t._v("✔️链表倒数第k个节点")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/deep-clone"}},[t._v("相交链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/deep-clone"}},[t._v("扁平化多级双向链表")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Algorithm/Linked-List/deep-clone"}},[t._v("合并两个排序的链表")])])]),t._v(" "),e("h4",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Array/deep-clone"}},[t._v("✔️完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"栈和队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈和队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈和队列")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Stack-and-Queue/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"树和二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树和二叉树","aria-hidden":"true"}},[t._v("#")]),t._v(" 树和二叉树")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Tree-and-Binary-Tree/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/String/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"递归与循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归与循环","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归与循环")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Recursion-and-Loop/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找","aria-hidden":"true"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Search/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Bitwise/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"回溯法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回溯法","aria-hidden":"true"}},[t._v("#")]),t._v(" 回溯法")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Backtracking/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"数学"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数学","aria-hidden":"true"}},[t._v("#")]),t._v(" 数学")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Math/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"哈希表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哈希表","aria-hidden":"true"}},[t._v("#")]),t._v(" 哈希表")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Hashtable/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆","aria-hidden":"true"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Heap/deep-clone"}},[t._v("完美实现深拷贝")])])]),t._v(" "),e("h4",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Algorithm/Other/deep-clone"}},[t._v("完美实现深拷贝")])])])])}),[],!1,null,null,null);a.default=i.exports}}]);