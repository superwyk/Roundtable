(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{205:function(t,a,r){t.exports=r.p+"assets/img/find-first-common-node.8d144600.png"},241:function(t,a,r){"use strict";r.r(a);var s=r(0),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"两个链表的第一个公共结点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个链表的第一个公共结点","aria-hidden":"true"}},[t._v("#")]),t._v(" 两个链表的第一个公共结点")]),t._v(" "),s("h2",{attrs:{id:"_1、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、题目描述","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、题目描述")]),t._v(" "),s("p",[t._v("输入两个链表，找出它们的第一个公共结点。")]),t._v(" "),s("h2",{attrs:{id:"_2、思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、思路")]),t._v(" "),s("p",[t._v("本题首先可以很直观的想到蛮力法，即对链表1(假设长度为m)的每一个结点，遍历链表2(假设长度为n)，找有没有与其相同的结点，这显然复杂度为O(mn)。")]),t._v(" "),s("p",[t._v("进一步考虑，我们可以得到以下三种改进的解法：")]),t._v(" "),s("p",[t._v("方法一：借助辅助栈。我们可以把两个链表的结点依次压入到两个辅助栈中，这样两个链表的尾结点就位于两个栈的栈顶，接下来比较两个栈顶的结点是否相同。如果相同，则把栈顶弹出继续比较下一个，直到找到最后一个相同的结点。此方法也很直观，时间复杂度为O(m+n)，但使用了O(m+n)的空间，相当于用空间换区了时间效率的提升。")]),t._v(" "),s("p",[t._v("方法二：将两个链表设置成一样长。具体做法是先求出两个链表各自的长度，然后将长的链表的头砍掉，也就是长的链表先走几步，使得剩余的长度与短链表一样长，这样同时向前遍历便可以得到公共结点。时间复杂度为O(m+n)，不需要额外空间。")]),t._v(" "),s("p",[t._v("方法三：将两个链表拼接起来。 将两个链表进行拼接，一个链表1在前链表2在后，另一个链表2在前链表1在后，则合成的两个链表一样长，然后同时遍历两个链表，就可以找到公共结点，时间复杂度同样为O(m+n)。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(205),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_3、代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、代码实现")])])}),[],!1,null,null,null);a.default=e.exports}}]);